name: ECR vulnerability detection

on:
  schedule:
    - cron: '0 10 * * *'
  push:
    branches:
      - feature/sc-23564/master-security-scan-on-latest-images

jobs:
  vulnerability-detection:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - image_tag: "8.1-alpine3.19"
          - image_tag: "8.2-alpine3.19"
          - image_tag: "8.3-alpine3.19"
          - image_tag: "8.1-alpine3.20"
          - image_tag: "8.2-alpine3.20"
          - image_tag: "8.3-alpine3.20"
          - image_tag: "8.4-alpine3.20"
          - image_tag: "8.2-alpine3.21"
          - image_tag: "8.3-alpine3.21"
          - image_tag: "8.4-alpine3.21"
          - image_tag: "8.2-alpine3.22"
          - image_tag: "8.3-alpine3.22"
          - image_tag: "8.4-alpine3.22"

    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Pull the latest image from the DockerHub
        run: docker pull "${{ matrix.image_tag }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repo exists (scanOnPush on)
        run: |
          aws ecr describe-repositories --repository-names "${{ secrets.AWS_ECR_REPO }}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${{ secrets.AWS_ECR_REPO }}" \
            --image-scanning-configuration scanOnPush=true

      - name: Tag & push to ECR
        id: push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ECR_URI="${ECR_REGISTRY}/${{ secrets.AWS_ECR_REPO }}:${{ matrix.image_tag }}"
          docker tag "${{ matrix.image_tag }}" "$ECR_URI"
          docker push "$ECR_URI"
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV

      - name: Scan Docker image (ECR)
        id: docker-scan
        uses: alexjurkiewicz/ecr-scan-image@v2.0.0
        with:
          repository: ${{ secrets.AWS_ECR_REPO }}
          tag: ${{ steps.meta.outputs.final_tag }}

      - name: Echo totals
        run: |
          echo "${{ steps.docker-scan.outputs.total }} total vulnerabilities."
          echo "Critical: ${{ steps.docker-scan.outputs.critical }}, High: ${{ steps.docker-scan.outputs.high }}, Medium: ${{ steps.docker-scan.outputs.medium }}, Low: ${{ steps.docker-scan.outputs.low }}"

      - name: Delete image from ECR (optional cleanup)
        if: always()
        run: |
          aws ecr batch-delete-image \
            --repository-name "${{ secrets.AWS_ECR_REPO }}" \
            --image-ids imageTag="${{ steps.meta.outputs.final_tag }}" || true

      - name: Set Date and Time
        id: set-date
        if: github.event_name == 'schedule'
        run: echo "current_datetime=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Set Color
        id: set-color
        if: github.event_name == 'schedule'
        shell: bash
        run: |
          if [ "${{ steps.docker-scan.outputs.total }}" = "0" ]; then
            echo "color=#008000" >> $GITHUB_OUTPUT
          else
            echo "color=#ff0000" >> $GITHUB_OUTPUT
          fi

      - name: Send GitHub Action trigger data to Slack
        id: slack
        if: github.event_name == 'schedule'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Scanned image *${{ steps.resolve.outputs.source }}* â†’ *${{ secrets.AWS_ECR_REPO }}:${{ steps.meta.outputs.final_tag }}*",
              "attachments": [
                {
                  "pretext": "ECR vulnerability scan for ${{ steps.set-date.outputs.current_datetime }}",
                  "color": "${{ steps.set-color.outputs.color }}",
                  "fields": [
                    { "title": "Total",     "short": true, "value": "*${{ steps.docker-scan.outputs.total }}*" },
                    { "title": "Critical",  "short": true, "value": "${{ steps.docker-scan.outputs.critical }}" },
                    { "title": "High",      "short": true, "value": "${{ steps.docker-scan.outputs.high }}" },
                    { "title": "Medium",    "short": true, "value": "${{ steps.docker-scan.outputs.medium }}" },
                    { "title": "Low",       "short": true, "value": "${{ steps.docker-scan.outputs.low }}" }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Fail the execution if vulns found
        if: ${{ steps.docker-scan.outputs.total && steps.docker-scan.outputs.total != '0' }}
        run: exit 1

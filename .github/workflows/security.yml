name: Vulnerability detection

on:
  push:
    branches-ignore:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
#        ## Alpine
#        ### Alpine 3.14
#        - image: "alpine/3.14/8.0/Dockerfile"
#          tag: "spryker/php:8.0-alpine3.14"
#          platform: "linux/amd64"
#        - image: "alpine/3.14/8.1/Dockerfile"
#          tag: "spryker/php:8.1-alpine3.14"
#          platform: "linux/amd64"
#
#        ### Alpine 3.15
#        - image: "alpine/3.15/8.0/Dockerfile"
#          tag: "spryker/php:8.0-alpine3.15"
#          platform: "linux/amd64"
#        - image: "alpine/3.15/8.1/Dockerfile"
#          tag: "spryker/php:8.1-alpine3.15"
#          platform: "linux/amd64"

        ### Alpine 3.16
          - image: "alpine/3.16/8.0/Dockerfile"
            tags: ["spryker/php:8.0-alpine3.16"]
            platforms: ["linux/amd64"]
          - image: "alpine/3.16/8.1/Dockerfile"
            tags: ["spryker/php:8.1-alpine3.16"]
            platforms: ["linux/amd64"]

        # Debian
        ## Debian bullseye
#        - image: "debian/bullseye/8.0/Dockerfile"
#          tag: "spryker/php:8.0-debian"
#          platform: "linux/amd64"
#        - image: "debian/bullseye/8.1/Dockerfile"
#          tag: "spryker/php:8.1-debian"
#          platform: "linux/amd64"

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        id: docker-build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.ref != 'refs/heads/master' }}
          file: ${{ matrix.image }}
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ join(matrix.tags) }}-${{ github.sha }}
          platforms: ${{ join(matrix.platforms) }}

      - name: Scan Docker image
        id: docker-scan
        uses: alexjurkiewicz/ecr-scan-image@v1.7.1
        with:
          repository: spryker/php
          tag: php:8.1-alpine3.16-${{ github.sha }}
          fail_threshold: high

      - run: echo "${{ steps.docker-scan.outputs.total }} total vulnerabilities."


#      - name: Run AWS ECR scan
#        uses: aws-actions/amazon-ecr-scan@v0
#        with:
#          image-uri: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ join(matrix.tags) }}-${{ github.sha }}
#          report-format: "sarif"
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Check scan results
#        run: |
#          VULNERABILITIES=$(jq -r '.[0].vulnerabilities.severity_counts.critical' ${GITHUB_WORKSPACE}/scan.sarif)
#          if [[ $VULNERABILITIES -gt 0 ]]; then
#            echo "Image has vulnerabilities"
#            exit 1
#          else
#            echo "Image is secure"
#          fi
#        if: ${{ steps.scan.outcome == 'success' }}

#      - name: Delete Docker image from AWS ECR
#        run: |
#          aws ecr batch-delete-image --repository-name your-repository-name --image-ids imageDigest=$(aws ecr describe-images --repository-name your-repository-name --query "sort_by(imageDetails,& imagePushedAt)[-1].imageDigest" --output text)
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
